/**
 * generated by Xtext 2.16.0
 */
package xklaim.validation;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.ValidationMessageAcceptor;
import org.eclipse.xtext.xbase.XExpression;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xbase.validation.IssueCodes;

import com.google.inject.Inject;

import xklaim.util.XklaimModelUtil;
import xklaim.xklaim.XklaimAbstractOperation;
import xklaim.xklaim.XklaimNodeEnvironmentEntry;

/**
 * This class contains custom validation rules.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class XklaimValidator extends AbstractXklaimValidator {
	public static final String PREFIX = "xklaim.";

	public static final String WRONG_FORMAL_INITIALIZATION = XklaimValidator.PREFIX + "WrongFormalInitialization";
	public static final String INVALID_FINAL_FORMAL = XklaimValidator.PREFIX + "InvalidFinalFormal";

	@Inject
	private XklaimModelUtil xklaimModelUtil;

	@Override
	protected boolean isValueExpectedRecursive(final XExpression expr) {
		final EObject container = expr.eContainer();
		return container instanceof XklaimAbstractOperation
				|| container instanceof XklaimNodeEnvironmentEntry
				|| super.isValueExpectedRecursive(expr);
	}

	@Override
	protected boolean isLocallyUsed(final EObject target, final EObject containerToFindUsage) {
		if (containerToFindUsage instanceof XklaimAbstractOperation) {
			// we don't want warning when a variable declaration appears as
			// formal field: it is implicitly used for the result
			return true;
		}
		return super.isLocallyUsed(target, containerToFindUsage);
	}

	@Override
	public void checkVariableDeclaration(final XVariableDeclaration declaration) {
		EObject container = declaration.eContainer();
		if (container instanceof XklaimAbstractOperation) {
			if (declaration.getRight() != null) {
				error("Formal field must not be initialized",
						XbasePackage.Literals.XVARIABLE_DECLARATION__WRITEABLE,
						ValidationMessageAcceptor.INSIGNIFICANT_INDEX,
						XklaimValidator.WRONG_FORMAL_INITIALIZATION);
			}
			if (declaration.getType() == null) {
				error("Type must be specified", XbasePackage.Literals.XVARIABLE_DECLARATION__NAME,
						ValidationMessageAcceptor.INSIGNIFICANT_INDEX,
						IssueCodes.MISSING_TYPE);
			}
		} else {
			super.checkVariableDeclaration(declaration);
		}
	}

	@Check
	public void checkNonFinalFormalFieldsInWhileLoop(final XWhileExpression e) {
		var formalFields = xklaimModelUtil.getAllFormalFields(e);
		for (var formalField : formalFields) {
			if (!formalField.isWriteable()) {
				error("use 'var' instead of 'val' for formal field in loop's expression",
					formalField,
					XbasePackage.Literals.XVARIABLE_DECLARATION__WRITEABLE,
					XklaimValidator.INVALID_FINAL_FORMAL);
			}
		}
	}
}
