# the first X-Klaim program

nodes
hello_world :: {}
  class "Klava.NetNode"
  begin
    print "Hello World!"
  end
endnodes

# the first X-Klaim program

nodes
hello_world :: {}
  class "Klava.NetNode"
  begin
    print "Hello World!"
  end
endnodes

/*
  File HelloWorld.java

  Generated by xklaim compiler
*/

import java.io.* ;
import Klava.* ;

class __hello_world_1 extends KlavaProcess {
  // variables
  // used definition names

  public __hello_world_1() {}

  public void execute() throws KlavaException {
    Print( new KString( "Hello World!" ) ) ;
  }
}
// main class
public class HelloWorld {
  static public void main( String args[] ) throws IOException, KlavaException {
    KlavaApplication app = new KlavaApplication();
    NetNode hello_world = new Klava.NetNode( "hello_world", 9999 );
    app.addNode(hello_world) ;
    hello_world.addProcess( new __hello_world_1() ) ;
    app.startNodes();
    app.waitForNodesAndTerminate();
  }
}

ClientNode o Net?

node class=Net address="..."

node class=ClientNode address="..." {
	login
}

oppure come era prima

net locality="..." {
	node ...
	node ...
}

	protected def reassignThisType(ITreeAppendable b, JvmDeclaredType declaredType) {
		if (b.hasObject('this')) {
			val element = b.getObject('this')
			if (element instanceof JvmDeclaredType) {
				if (element.local) {
					b.declareVariable(element, '')
				} else {
					val proposedName = element.simpleName+'.this'
					b.declareVariable(element, proposedName)
				}
			}
		}
		if (declaredType !== null)
			b.declareVariable(declaredType, 'this');
	}

	protected String getReferenceName(XExpression expr, ITreeAppendable b) {
		if (b.hasName(expr))
			return b.getName(expr);
		if (expr instanceof XFeatureCall) {
			XFeatureCall featureCall = (XFeatureCall) expr;
			if (b.hasName(featureCall.getFeature()))
				return b.getName(featureCall.getFeature());
		}
		return null;
	}

// redefine Xbase primary expression with our special expressions
@Override 
XPrimaryExpression returns xbase::XExpression:
	XklaimAbstractOperation |
	super
;

XklaimAbstractOperation returns xbase::XExpression:
	XklaimOutOperation | XklaimAbstractMatchingOperation
;

XklaimOutOperation returns XklaimAbstractOperation:
	{XklaimOutOperation} op='out' '(' arguments+=XExpression (',' arguments+=XExpression)* ')' '@' locality=XFeatureCall
;

XklaimInOperation returns XklaimAbstractOperation:
	{XklaimInOperation} op='in' '(' arguments+=XExpressionOrVarDeclaration (',' arguments+=XExpressionOrVarDeclaration)* ')' '@' locality=XFeatureCall
;

XklaimReadOperation returns XklaimAbstractOperation:
	{XklaimReadOperation} op='read' '(' arguments+=XExpressionOrVarDeclaration (',' arguments+=XExpressionOrVarDeclaration)* ')' '@' locality=XFeatureCall
;

XklaimAbstractMatchingOperation:
	XklaimInOperation | XklaimReadOperation
;

package foo
proc TestProcess(String s) {
	if (inp(val Integer i, s)@self && !inp(val String l)@self) {
		println(l + i)
	} else {
		val res = (l + i)
	}
}

final variables cannot be used when the operation is used as a boolean operation

package foo
proc TestProcess(String s) {
	if (in_nb(var Integer i, s)@self && !in_nb(var String l)@self) {
		println(l + i)
	} else {
		val res = (l + i)
	}
}

PREPROCESS INLINE PROCESSES

references to variables in the outer scope must be turned into fields of the inner class

public class MyJavaTests {

	private int i;
	
	private void myMethod(String s) {
		Object o;
		o = null;
		o = new Object();
		String s1 = "";
		s1 = "hello";
		
		Runnable r = new Runnable() {
			Object o;
			String s1;
			
			private Runnable _initFields(Object o, String s1) {
				this.o = o;
				this.s1 = s1;
				return this;
			}
			
			@Override
			public void run() {
				System.out.println(s1);
				System.out.println(o);
				System.out.println(i + s);
			}
		}._initFields(o, s1);

	}
}

