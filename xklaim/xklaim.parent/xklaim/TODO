# the first X-Klaim program

nodes
hello_world :: {}
  class "Klava.NetNode"
  begin
    print "Hello World!"
  end
endnodes

# the first X-Klaim program

nodes
hello_world :: {}
  class "Klava.NetNode"
  begin
    print "Hello World!"
  end
endnodes

/*
  File HelloWorld.java

  Generated by xklaim compiler
*/

import java.io.* ;
import Klava.* ;

class __hello_world_1 extends KlavaProcess {
  // variables
  // used definition names

  public __hello_world_1() {}

  public void execute() throws KlavaException {
    Print( new KString( "Hello World!" ) ) ;
  }
}
// main class
public class HelloWorld {
  static public void main( String args[] ) throws IOException, KlavaException {
    KlavaApplication app = new KlavaApplication();
    NetNode hello_world = new Klava.NetNode( "hello_world", 9999 );
    app.addNode(hello_world) ;
    hello_world.addProcess( new __hello_world_1() ) ;
    app.startNodes();
    app.waitForNodesAndTerminate();
  }
}

ClientNode o Net?

node class=Net address="..."

node class=ClientNode address="..." {
	login
}

oppure come era prima

net locality="..." {
	node ...
	node ...
}

	protected def reassignThisType(ITreeAppendable b, JvmDeclaredType declaredType) {
		if (b.hasObject('this')) {
			val element = b.getObject('this')
			if (element instanceof JvmDeclaredType) {
				if (element.local) {
					b.declareVariable(element, '')
				} else {
					val proposedName = element.simpleName+'.this'
					b.declareVariable(element, proposedName)
				}
			}
		}
		if (declaredType !== null)
			b.declareVariable(declaredType, 'this');
	}

	protected String getReferenceName(XExpression expr, ITreeAppendable b) {
		if (b.hasName(expr))
			return b.getName(expr);
		if (expr instanceof XFeatureCall) {
			XFeatureCall featureCall = (XFeatureCall) expr;
			if (b.hasName(featureCall.getFeature()))
				return b.getName(featureCall.getFeature());
		}
		return null;
	}

final variables cannot be used when the operation is used as a boolean operation

package foo
proc TestProcess(String s) {
	if (in_nb(var Integer i, s)@self && !in_nb(var String l)@self) {
		println(l + i)
	} else {
		val res = (l + i)
	}
}

INNER PROCESSES VARIABLE BINDINGS:

public class HelloRemoveEvalProcNet extends LogicalNet {
  public static class Reader extends ClientNode {
    private static class ReaderProcess extends KlavaProcess {
      @Override
      public void executeProcess() {
        final LogicalLocality writerLoc = new LogicalLocality("writer");
        KlavaProcess _Proc = new KlavaProcess() {
          LogicalLocality writerLoc;
          private KlavaProcess _initFields(LogicalLocality writerLoc) {
            this.writerLoc = writerLoc;
            return this;
          }
          @Override public void executeProcess() {
            {
              Locality _physical = ReaderProcess.this.getPhysical(writerLoc);
              String _plus = ("executing at " + _physical);
              InputOutput.<String>println(_plus);
              String s = null;
              Tuple _Tuple = new Tuple(new Object[] {String.class});
              in(_Tuple, ReaderProcess.this.self);
              s = (String) _Tuple.getItem(0);
              InputOutput.<String>println(s);
            }
          }
        }._initFields(writerLoc);
        eval(_Proc, writerLoc);
      }
    }

Locality _physical = ReaderProcess.this.getPhysical(writerLoc);

this is wrong: it should be

Locality _physical = this.getPhysical(writerLoc);
